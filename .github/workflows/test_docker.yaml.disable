name: Build Docker

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: '手動指定版本（例如 1.2.3）'
        required: true
        default: 'v0.2'

env:
  VERSION: ${{ github.event.inputs.version || github.ref_name }}
  CGO_CFLAGS: '-O3'
  CGO_CXXFLAGS: '-O3'

jobs:
  setup-environment:
    runs-on: self-hosted
    environment: release
    outputs:
      GOFLAGS: ${{ steps.goflags.outputs.GOFLAGS }}
    steps:
      - uses: actions/checkout@v4
      - name: Set environment
        id: goflags
        run: |
          VERSION=${{ env.VERSION }}
          VERSION_NO_V="${VERSION#v}"
          echo "GOFLAGS='-ldflags=-w -s \"-X=github.com/ChangLijie/ollama_test/version.Version=${VERSION_NO_V}\" \"-X=github.com/ChangLijie/ollama_test/server.mode=release\"'" >> "$GITHUB_OUTPUT"


  docker-build-push:
    strategy:
      fail-fast: true
      # max-parallel: 1
      matrix:
        include:
          - os: linux
            arch: amd64
            runs_on: [self-hosted, X64]
            suffix: ''
            build-args: |
              CGO_CFLAGS
              CGO_CXXFLAGS
              GOFLAGS
          - os: linux
            arch: arm64
            runs_on: [self-hosted, ARM64]
            suffix: ''
            build-args: |
              CGO_CFLAGS
              CGO_CXXFLAGS
              GOFLAGS
          # - os: linux
          #   arch: amd64
          #   suffix: '-rocm'
          #   build-args: |
          #     CGO_CFLAGS
          #     CGO_CXXFLAGS
          #     GOFLAGS
          #     FLAVOR=rocm
    runs-on: ${{ matrix.runs_on }}
    environment: release
    needs: setup-environment
    env:
      DOCKER_BUILDKIT: 1 
      GOFLAGS: ${{ needs.setup-environment.outputs.GOFLAGS }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

      - name: Build and Push Docker Image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: ${{ matrix.os }}/${{ matrix.arch }}
          build-args: ${{ matrix.build-args }}
          outputs: type=image,name=innodiskorg/ollama,push-by-digest=true,name-canonical=true,push=true
          cache-from: type=registry,ref=ollama/ollama:latest
          cache-to: type=inline
          progress: plain

      - name: Save digest for merging
        run: |
          mkdir -p ${{ matrix.os }}-${{ matrix.arch }}
          echo "${{ steps.build.outputs.digest }}" >${{ matrix.os }}-${{ matrix.arch }}${{ matrix.suffix }}.txt
        working-directory: ${{ runner.temp }}

      - uses: actions/upload-artifact@v4
        with:
          name: digest-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.suffix }}
          path: ${{ runner.temp }}/${{ matrix.os }}-${{ matrix.arch }}${{ matrix.suffix }}.txt

  docker-merge-push:
    strategy:
      matrix:
        suffix: ['']
    runs-on: self-hosted
    needs: [docker-build-push]
    environment: release
    steps:
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

      - id: metadata
        uses: docker/metadata-action@v4
        with:
          flavor: |
            latest=false
            suffix=${{ matrix.suffix }}
          images: |
            innodiskorg/ollama
          tags: |
            type=raw,value=${{ env.VERSION }}

      - uses: actions/download-artifact@v4
        with:
          pattern: digest-*
          path: ${{ runner.temp }}
          merge-multiple: true

      - name: Create multi-arch manifest
        run: |
          docker buildx imagetools create \
            $(echo '${{ steps.metadata.outputs.json }}' | jq -cr '.tags | map("-t", .) | join(" ")') \
            $(cat ${{ runner.temp }}/*${{ matrix.suffix }}.txt | xargs printf 'innodiskorg/ollama@%s ')
      - name: Inspect image
        run: |
          docker buildx imagetools inspect innodiskorg/ollama:${{ env.VERSION }}
